;;;; web.lisp

(in-package #:web)

;;; "web" goes here. Hacks and glory await!

(defmacro make-web-project(pathname &key (depends-on '("web")))
  `(quickproject:make-project ,pathname :depends-on ',depends-on))



;;util functions for front

;;;;;for parenscript
(setf *js-string-delimiter* #\')

;;;;;;;JavaScript


;;(let((*js-string-delimiter* #\"))
(defmacro js2string(&body js-body)
  `(ps ,@js-body))

(defmacro exec-js2string(&body js-body)
  `(format nil "~A~%~A" "#! /usr/bin/nodejs" (ps ,@js-body)))

(defmacro json2string(&body json-body)
  `(substitute #\" #\' (string-trim '(#\; #\( #\) ) (ps ,@json-body))))


(defmacro js2file(filename &body js-body)
  `(progn
     (with-open-file (out ,filename 
			  :direction :output
			  :if-exists :supersede 
			  :if-does-not-exist :create)
       (format out (js2string ,@js-body)))
     (format t "~%Done! js->: ~A from ~A" ,filename (truename "."))))




(defmacro json2file(filename &body js-body)
  `(progn
     (with-open-file (out ,filename 
			  :direction :output
			  :if-exists :supersede 
			  :if-does-not-exist :create)
       (format out (json2string ,@js-body)))
     (format t "~%Done! JSON->: ~A from ~A" ,filename (truename "."))))


(defmacro exec-js2file(filename &body js-body)
  `(progn
     (with-open-file (out ,filename 
			  :direction :output
			  :if-exists :supersede 
			  :if-does-not-exist :create)
       (format out (exec-js2string ,@js-body)))
     (format t "~%Done! EXEC-js->: ~A from ~A" ,filename (truename "."))))




(defun css2string(css-raw)
  (cl-css:css (css2sass css-raw)))

(defun css2file(filename css-raw)
  "write css to file"
  (cl-css:compile-css filename (css2sass css-raw))
  (format t "~%Done! css->: ~A from ~A" filename (truename ".")))


;;;;;;;;;jquery
(defmacro jquery2string(&body jquery-body)
  `(ps ((chain ($ document)
	       (ready (lambda()
			,@jquery-body))))))


(defmacro jquery2file(filename &body jquery-body)
  `(progn
     (with-open-file (out filename 
			  :direction :output
			  :if-exists :supersede 
			  :if-does-not-exist :create)
       (format out (ps  ((chain ($ document)
				(ready (lambda()
					 ,@jquery-body)))))))
     (format t "~%Done! jquery->: ~A from ~A " file (truename "."))))





(<:augment-with-doctype "html" "")


(defmacro Dynamic-scripts(frame)
  ;; incase of duplicated scripts
  (with-gensym(context)
    (let*((context frame)
	  (scripts (remove-duplicates (getf context :scripts) :test #'string-equal))
	  (internal-script (getf context :internal-script))
	  (app-name 'app))
      (labels((serial-load (scripts)
		(cond((= (length scripts) 1)
		      `(chain ,app-name (load-script ,(car scripts)
						     ,(when internal-script `(lambda()
									       (chain ,app-name (init)))))))
		     (t `(chain ,app-name (load-script ,(car scripts) (lambda() ,(serial-load (cdr scripts)))))))))
 	  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 
	(cond((> (length scripts) 0)
	      `(ps 
		 ((lambda()
		    (var ,app-name 
			 (create
			  load-script
			  (lambda(url &optional callback)
			    (var script (chain document (create-element "script")))
			    (setf (@ script type) "text/javascript")
			    (cond((@ script ready-state) ;;IE
				  (setf (@ script onreadystatechange)
					(lambda()
					  (when(chain (regex "complete|loaded") (test (@ script ready-state)))
					    (setf (@ script onreadystatechange) null)
					    (when callback (callback))))))
				 (t ;;standard
				  (setf (@ script onload) 
					(lambda()
					  (when callback (callback))))))
			    (setf (@ script src) url)
			    (chain (elt (chain document (get-elements-by-tag-name "head")) 0)
				   (append-child script)))))
		    ,(serial-load scripts)
		    ,(when internal-script
			   `(setf (@ ,app-name init) (lambda() ,@internal-script)))))))
	     (internal-script
	      `(ps ((lambda() ,@(getf context :internal-script)))))
	     (t nil)))))) ;;for not script (both internal and external).


(defmacro html-frame(context)
  `(<:html
    :lang "zh-CN"
    (<:head
     (<:meta :charset "utf-8")
     (newline)
     ;;Always put the document into the most recent document mode available.???
     (<:meta :http-equiv "X-UA-Compatible" :content "IE=Edge")
     (when (getf ',context :title)
       (<:title (getf ',context :title))) 
     (newline)
     (<:!-- "external css")
     (newline)
     (when (getf ',context :css-s)
       (loop for css in (remove-duplicates (getf ',context :css-s) :test #'string-equal)
	  collect
	    (<:link :rel "stylesheet" :type "text/css" :href css)))
     (newline)
     (<:!-- "internal css")
     (newline)
     (when (getf ',context :internal-css)
       (<:style :type "text/css" (css2string ,(getf context :internal-css))))
     (newline)    
     (<:!-- "Dynamic external script (can be with internal scripts)")
     (newline)
     (when (dynamic-scripts ,context)
       (<:script :type "text/javascript" 
		 (format nil "~A//<![CDATA[~A ~a ~A//]]>~A"
			 (newline)(newline);;;for xhtml
			 (dynamic-scripts ,context)
			 (newline)(newline)))))
    ;;;end CSS and External (dynamic) javascript
   	       ;;;end CSS
 ;;;end head
    (<:!-- "body")
    (newline)
    (<:body ,(getf context :body)
	    (newline))))




;;(html-frame (:internal-css `((* :margin 0 ,@(border-radius 12em) ))))
(defmacro html2file(filename &rest context)
  "write html5 to file.
context: title body internal-css css-s internal-script scripts"
  `(progn
     (with-open-file (out ,filename 
			  :direction :output
			  :if-exists :supersede 
			  :if-does-not-exist :create)
       (format out (html-frame ,context)))
     (format t "~%Done! html->: ~A from ~A" ,filename (truename "."))))

;;;;;;test code
`(html2file
  "~/test.html"
  :internal-css `((* :margin 0)
		  ("#div1" :width 100px :height 100px ,@(border-radius 12em)
			   (span ,@(border-radius 12em)))
		  (p ,@(opacity 20)
		     (span :font-size 12px)))
  
  ;;:internal-script ((print (id "div1")))
  :body
  (<:div :id "test"
	 (<:div :id "div1")
	 (<:ul :class "shit"
	       (loop for i from 1 to 3
		  collect
		    (<:li :class "shitli" (format nil "~R" i)))))
  :scripts ( "2.js" "2.js" "http://libs.baidu.com/jquery/2.0.0/jquery.min.js" "1.js")
  :css-s ("styl2.css" "styl1.css")
  )


