(in-package #:web)

;;1.-----------事件流
;;事件冒泡2：直到最外层body html, 不到document 和 window
;;  事件捕获：方向相反，html为最前端
(extend-lib
    (event-proto)
  `(progn
     (chain ,$ (each (create on "addEvent" off "removeEvent")
		     (lambda(event-name proto-name)
		       (setf (elt (@ ,$ fn) proto-name)
			     (lambda(type handler)
			       (chain this (each (lambda(elem) 						   
						   ((elt (@ ,$ event) event-name) elem type handler)))))))))
     (setf (@ ,$ ready) (@ ,$ event ready))
     ))

(extend-lib
    (event)
  `(chain ,$
	  (extend
	   (Create 
	    event
	    (create 
    ;;;2.---------事件添加和删除
	     ;;1.in Opera(v=12.16): which supports attachEvent(like IE), but the typeof document.body.attachEvent      --> "unbdefined"
	     ;;                                                                  typeof document.body.addEventListener --> "function"
	     ;;            Object.prototype.toString.call(document.body.attachEvent)--> "[object Function]"    
	     ;;2. For IE8-: wind using method below to add event to window, the srcElement is not provided as the "document"
	     ;;3.IE8-中，使用attachEvent时，handler函数中的this始终指向window对象。
	     ;;  当添加多个事件时，后添加的事件先执行，与addEventListener相反
	     

	     ;;Refernce: http://dean.edwards.name/my/events.js
	 
	     ;; 为了使所有浏览器效果一致，即使是Firefox也不使用addEventlistner
	     guid 0	     
	     add-event
	     (lambda(elem type handler)
	       (unless(@ handler $$guid)
		 (setf (@ handler $$guid) (incf (@ ,$ event guid))))
	       (unless (@ elem events)
		 (setf (@ elem events) (create)))
	       (setf handlers (elt (@ elem events) type))
	       (unless handlers
		 ;;handlers不采用Object，而是Array 使添加事件的顺行得到保证
		 (setf (elt (@ elem events) type) (array)) 
		 (setf handlers (elt (@ elem events) type))
		 (when (elt elem (+ "on" type))
		   (setf (elt handlers 0)  (elt elem (+ "on" type))))		 
		 (setf (elt elem (+ "on" type)) (@ ,$ event handle-event)))
	       ;;(print handlers)
	       (setf (elt handlers (@ handler $$guid)) handler))
	     
	     remove-event
	     (lambda(elem type handler)
	       (var len)
	       (when (@ elem events)
		 (setf handlers (elt (@ elem events) type)
		       len handlers)
		 (when handlers
		   (delete (elt handlers (@ handler $$guid)))
		   ;;当所有通过addEvent添加的事件都removed后，元素上不再具有events属性
		   ;;而且，如果html中没有添加任何事件, 元素的on[?type]属性被删除
		   ;;如果有，则回到原来的状态
		   (when (chain ,$ (every (chain slice (call handlers 1))
					(lambda(handler) (= handler undefined))))
		     (setf (@ elem events) null)
		     (if (= (elt handlers 0) undefined)		       
			 (setf (elt elem (+ "on" type)) null)
			 (setf (elt elem (+ "on" type)) (elt handlers 0)))))))

	     handle-event
	     (lambda(event)
	       (var return-value true)
	       (setf event (or event (chain ,$ (fixed-event
						(@ (or (@ (or (@ this owner-document) (@ this document) this) parent-window)
						       window)
						   event)))))

	       (var handlers (elt (@ this events) (@ event type)))
	       (var handler)
	       (var len (length handlers))
	       (dotimes(i len)
		 (setf handler (elt handlers i))
		 (unless(= handler undefined)
		   ;;有多个handlers时，当某个handler返回false停止执行后面的handler（s）
		   ;;并且可通过handler返回true/false控制是否preventDefault
		   (when(= (chain handler (call this event)) false) 
		     ;;保证handler中的this指向元素本身
		     (setf return-value false)
		     (break))))
	       return-value)
	     

	     ;;;为MSIE中的Event对象增加W3C的方法
	     fixed-event
	     (lambda(event)
	       (setf (@ event prevent-default) (@ ,$ event prevent-default)
		     (@ event stop-propagation) (@ ,$ event stop-propagation)
		     (@ event target) (@ event src-element))
	       event)

	     prevent-default
	     (lambda()
	       (setf (@ this return-value) false))
	     
	     stop-propagation
	     (lambda()
	       (setf (@ this cancel-bubble) true))

	     
	     ;;;;DOM ready
	     ;;
	     onload-handlers (array)
	     current-handler undefined
	     
	     add-onload-handlers	     
	     (lambda(fn)
	       (chain ,$ event onload-handlers (push fn)))
	     
	     dispatch-fake-event
	     (lambda()
	       (var fake-event (chain document (create-event "UIEvents")))
	       (chain fake-event (init-event "fakeEvents" false false))
	       (chain document (dispatch-event fake-event)))

	     onload
	     ((lambda()
		(chain document (add-event-listener "fakeEvents" (lambda()
								   (chain ,$ event (current-handler)))
						    false))
		(setf (@ window onload)
		      (lambda()
			(var len (length (@ ,$ event onload-handlers)))
			(dotimes(i len)
			  (setf (@ ,$ event current-handler) (elt (@ ,$ event onload-handlers) i))
			  ;;(print (@ ,$ event current-handler))
			  (chain ,$ event (dispatch-fake-event)))))))

	     ready
	     (lambda(fn)
	       (chain ,$ event (add-onload-handlers fn)))
		      
	     
	     
	     ready
	     (lambda(fn)
	       (alert "in")
	       (setf (@ ,$ event ready)
		     (if (@ document add-event-listener)
			 (lambda(fn)
			   (chain document (add-event-listener "DOMContentLoaded" fn false)))			
			 (@ ,$ event i-e-content-loaded)))
	       (chain ,$ event (ready fn)))

	     i-e-content-loaded
	     (lambda(fn)
	       (print "Iam ie")
	       (var done false)
	       (var timer)
	       (var init (lambda() (unless done (setf done true) (fn))))
	       (var polling (lambda() 
			      (try (chain doc-elem (do-scroll "left"))
				   (:catch(e)
				     (setf timer (set-timeout polling 50))
				     (return)))
			      (clear-timeout timer)
			      (init)))
	       (polling)
	       (setf (@ document onreadystatechange)
		     (lambda()
		       (when (chain (regex "complete|loaded") (test (@ document ready-state)))			
			 (setf (@ document onreadystatechange) null)
			 (init)))))
		        


  ;;;3.-------------事件对象
	     ;;   Except IE, Event Object may different from different event,
	     ;;   but all Event share properties and methods below(all read only)
	     ;;   ;;;properties
	     ;;   1.bubbles:(boolen) indicates if the event bubbles
	     ;;   2.cancelable:(boolen) indicates if the default behavior of the event can be cancled
	     ;;   3.currentTaget:(Element) The Element whose event handler is currently handling the event 
	     ;;   4.target:(Element) The target of the event
	     ;;   5.defaultPrevented(boolen): for true indicates the preventDefault method has be called (added in DOM 3)
	     ;;   6.detail:(integer): extra information related to the event
	     ;;   7.eventPhrase(integer)?: The phrase during which the event handler is being called:
	     ;;                          1 for capturing phrase, 2 for "at target", 3 for bubbling.
	     ;;   8.trusted(boolen)?: When true, indicates if the event was generated by the browser. 
	     ;;                      When false, indicates the event was created by the developer(added in DOM 3)
	     ;;   9.type(string): the type of the event was fired
	     ;;   10.view(AbstractView): The abstract view associated with the event.
	     ;;                          This is equal to the window in which the event was fired.
	     ;;   ;;;methods
	     ;;   1.preventDefualt(function): cancels the default behavior of the event, if cancelable is true, this mehtod can be used
	     ;;   2.stopImmdeiatePropagation(function): cancel any further event capturing and event bubbling 
	     ;;                                         and prevent any other event handlers from being called (added in DOM 3)
	     ;;   3.stopPropagation(function): cancel any event bubbling or capturing, if bubbles is true, this method can be used.
	     ;;   

	     ;;   for IE
	     ;;   1. If add event by DOM 0(button.onclick=function(e){var event=window.event}), the event exists on window.event
	     ;;      if add by attachEvent, the event behave normally as the the parameter passed in the handler, but also exists
	     ;;      on window.event
	     ;;   2.properties
	     ;;     a.cancleBubble(boolen, read/write): like stopPropagation()
	     ;;     b.returnValue(boolen, read/write): like preventDefault()
	     ;;     c.srcElement(element): like event.target
	     ;;     d.type: the same as none-IE event.type
	     ;;   3. the "this" in event handler may not equal to the target event, so using event.srcElement

	     ;;    get-event ;;get event
	     ;;    (lambda(e)
	     ;;      (or e (@ window e)))
	     ;;    
	     ;;    get-event-target ;;get event element
	     ;;    (lambda(e)
	     ;;      (or (@ e target) (@ e src-element)))
	     ;;    
	     ;;    prevent-default ;;prevent default event action
	     ;;    (lambda(e)
	     ;;      (setf (@ ,$ event prevent-default)
	     ;;	    (if (@ e prevent-default)
	     ;;		(lambda(e) (chain e (prevent-default)) e) ;;return the event object
	     ;;		(lambda(e) (setf (@ e return-value) false) e))) ;;return the event object
	     ;;      (chain ,$ event (prevent-default e)))
	     ;;    
	     ;;
	     ;;    stop-propagation ;;stop event propagation
	     ;;    (lambda(e)
	     ;;      (setf (@ ,$ event stop-propagation)
	     ;;	    (if (@ e stop-propagation)
	     ;;		(lambda(e) (chain e (stop-propagation)) e) ;;return the event object
	     ;;		(lambda(e) (setf (@ e cancel-bubble) true) e))) ;;return the event object
	     ;;      (chain ,$ event (stop-propagation e)))
	     


	     )))))



